generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           Int        @id @default(autoincrement())
  kakaoId      String?    @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  profileImage String?
  name         String?
  ageRange     String?
  gender       String?
  role         String
  messages     Message[]
  payments     Payment[]
  stores       Store[]
  chatRooms    ChatRoom[] @relation("ChatRoomToUser")
}

model Store {
  id          Int      @id @default(autoincrement())
  storeId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  location    String
  description String?
  phone       String?
  diningHours String
  ownerId     Int
  imageUrl    String?
  menus       Menu[]
  posts       Post[]
  owner       User     @relation(fields: [ownerId], references: [id])
}

model Menu {
  id        Int        @id @default(autoincrement())
  name      String
  imageUrl  String?
  price     Float
  storeId   Int
  store     Store      @relation(fields: [storeId], references: [id])
  menuItems MenuItem[]
}

model MenuItem {
  id            Int    @id @default(autoincrement())
  postId        Int
  menuId        Int
  discountPrice Float?
  menu          Menu   @relation(fields: [menuId], references: [id])
  post          Post   @relation(fields: [postId], references: [id])
}

model Post {
  id                Int        @id @default(autoincrement())
  description       String?
  eventDate         DateTime
  deadline          DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  published         Boolean    @default(false)
  storeId           Int
  diningAvailable   Boolean
  diningMenus       String[]
  diningTime        String?
  diningMaxPeople   Int?
  seatArrangeExcuse Boolean
  takeawayAvailable Boolean
  takeawayMenus     String[]
  takeawayTime      String?
  takeawayMaxPeople Int?
  minimumAmount     Int?
  menuItems         MenuItem[]
  payments          Payment[]
  store             Store      @relation(fields: [storeId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id                Int       @id @default(autoincrement())
  name              String?
  hashtags          String[]
  ageRestriction    Int?
  genderRestriction String?
  password          String?
  messages          Message[]
  participants      User[]    @relation("ChatRoomToUser")
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  content    String
  senderId   Int
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
}
